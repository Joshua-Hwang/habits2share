// Code generated by MockGen. DO NOT EDIT.
// Source: database_interface.go

// Package mock_habit_share is a generated GoMock package.
package mock_habit_share

import (
	reflect "reflect"

	habit_share "github.com/Joshua-Hwang/habits2share/pkg/habit_share"
	gomock "github.com/golang/mock/gomock"
)

// MockHabitsDatabase is a mock of HabitsDatabase interface.
type MockHabitsDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockHabitsDatabaseMockRecorder
}

// MockHabitsDatabaseMockRecorder is the mock recorder for MockHabitsDatabase.
type MockHabitsDatabaseMockRecorder struct {
	mock *MockHabitsDatabase
}

// NewMockHabitsDatabase creates a new mock instance.
func NewMockHabitsDatabase(ctrl *gomock.Controller) *MockHabitsDatabase {
	mock := &MockHabitsDatabase{ctrl: ctrl}
	mock.recorder = &MockHabitsDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitsDatabase) EXPECT() *MockHabitsDatabaseMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockHabitsDatabase) CreateActivity(habitId string, logged habit_share.Time, status string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", habitId, logged, status)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockHabitsDatabaseMockRecorder) CreateActivity(habitId, logged, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockHabitsDatabase)(nil).CreateActivity), habitId, logged, status)
}

// CreateHabit mocks base method.
func (m *MockHabitsDatabase) CreateHabit(newHabit habit_share.Habit) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabit", newHabit)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabit indicates an expected call of CreateHabit.
func (mr *MockHabitsDatabaseMockRecorder) CreateHabit(newHabit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabit", reflect.TypeOf((*MockHabitsDatabase)(nil).CreateHabit), newHabit)
}

// DeleteActivity mocks base method.
func (m *MockHabitsDatabase) DeleteActivity(habitId, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", habitId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActivity indicates an expected call of DeleteActivity.
func (mr *MockHabitsDatabaseMockRecorder) DeleteActivity(habitId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockHabitsDatabase)(nil).DeleteActivity), habitId, id)
}

// DeleteHabit mocks base method.
func (m *MockHabitsDatabase) DeleteHabit(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHabit", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHabit indicates an expected call of DeleteHabit.
func (mr *MockHabitsDatabaseMockRecorder) DeleteHabit(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHabit", reflect.TypeOf((*MockHabitsDatabase)(nil).DeleteHabit), id)
}

// GetActivities mocks base method.
func (m *MockHabitsDatabase) GetActivities(habitId string, after, before habit_share.Time, limit int) ([]habit_share.Activity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivities", habitId, after, before, limit)
	ret0, _ := ret[0].([]habit_share.Activity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActivities indicates an expected call of GetActivities.
func (mr *MockHabitsDatabaseMockRecorder) GetActivities(habitId, after, before, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivities", reflect.TypeOf((*MockHabitsDatabase)(nil).GetActivities), habitId, after, before, limit)
}

// GetHabit mocks base method.
func (m *MockHabitsDatabase) GetHabit(id string) (habit_share.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHabit", id)
	ret0, _ := ret[0].(habit_share.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHabit indicates an expected call of GetHabit.
func (mr *MockHabitsDatabaseMockRecorder) GetHabit(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHabit", reflect.TypeOf((*MockHabitsDatabase)(nil).GetHabit), id)
}

// GetMyHabits mocks base method.
func (m *MockHabitsDatabase) GetMyHabits(owner string, limit int, archived bool) ([]habit_share.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyHabits", owner, limit, archived)
	ret0, _ := ret[0].([]habit_share.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyHabits indicates an expected call of GetMyHabits.
func (mr *MockHabitsDatabaseMockRecorder) GetMyHabits(owner, limit, archived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyHabits", reflect.TypeOf((*MockHabitsDatabase)(nil).GetMyHabits), owner, limit, archived)
}

// GetScore mocks base method.
func (m *MockHabitsDatabase) GetScore(habitId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", habitId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockHabitsDatabaseMockRecorder) GetScore(habitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockHabitsDatabase)(nil).GetScore), habitId)
}

// GetSharedHabits mocks base method.
func (m *MockHabitsDatabase) GetSharedHabits(owner string, limit int) ([]habit_share.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedHabits", owner, limit)
	ret0, _ := ret[0].([]habit_share.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharedHabits indicates an expected call of GetSharedHabits.
func (mr *MockHabitsDatabaseMockRecorder) GetSharedHabits(owner, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedHabits", reflect.TypeOf((*MockHabitsDatabase)(nil).GetSharedHabits), owner, limit)
}

// SetHabit mocks base method.
func (m *MockHabitsDatabase) SetHabit(habitId string, updatedHabit habit_share.Habit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHabit", habitId, updatedHabit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHabit indicates an expected call of SetHabit.
func (mr *MockHabitsDatabaseMockRecorder) SetHabit(habitId, updatedHabit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHabit", reflect.TypeOf((*MockHabitsDatabase)(nil).SetHabit), habitId, updatedHabit)
}

// ShareHabit mocks base method.
func (m *MockHabitsDatabase) ShareHabit(habitId, friend string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareHabit", habitId, friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareHabit indicates an expected call of ShareHabit.
func (mr *MockHabitsDatabaseMockRecorder) ShareHabit(habitId, friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareHabit", reflect.TypeOf((*MockHabitsDatabase)(nil).ShareHabit), habitId, friend)
}

// UnShareHabit mocks base method.
func (m *MockHabitsDatabase) UnShareHabit(habitId, friend string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnShareHabit", habitId, friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnShareHabit indicates an expected call of UnShareHabit.
func (mr *MockHabitsDatabaseMockRecorder) UnShareHabit(habitId, friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnShareHabit", reflect.TypeOf((*MockHabitsDatabase)(nil).UnShareHabit), habitId, friend)
}
